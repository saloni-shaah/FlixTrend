rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if the requesting user has an admin role.
    function isAdmin() {
      // Check if the user is authenticated first.
      if (request.auth == null) {
        return false;
      }
      // Get the user's profile document from the 'users' collection.
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      
      // Ensure the 'role' field exists and is a list.
      if (!('role' in userProfile) || !(userProfile.role is list)) {
        return false;
      }
      
      // Check if the user's role list contains any of the admin roles.
      return userProfile.role.hasAny(['founder', 'cto', 'developer']);
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read a user's public profile.
      allow read: if true;
      
      // A user can create their own profile document.
      allow create: if request.auth.uid == userId;
      
      // A user can update their own profile, but cannot change their own 'role' or 'isPremium' status.
      allow update: if request.auth.uid == userId && !('role' in request.resource.data);

      // An admin can update ONLY the 'role' and 'isPremium' fields of any user.
      allow update: if isAdmin() && request.resource.data.keys().hasOnly(['role', 'isPremium']);
    }

    // Default deny all other collections/documents for security.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
