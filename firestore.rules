rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isFounder() {
      // The unique UID for the original founder, granting super-admin access.
      return request.auth.uid == 'uQpi9hoaX9dQQ2YHOYv05orx1rQ2';
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      // Allow owners to update their own profile, but NOT their role.
      // Allow founders to ONLY update the role field of any user.
      allow update: if (isOwner(userId) && !('role' in request.resource.data)) ||
                      (isFounder() && request.resource.data.keys().hasOnly(['role']));
    }

    match /posts/{postId}/{document=**} {
      allow read, write: if request.auth != null;
    }

    match /flashes/{flashId} {
      allow read, write: if request.auth != null;
    }

    match /chats/{chatId}/{document=**} {
      allow read, write: if request.auth != null; // Simplified for MVP
    }
    
    match /groups/{groupId} {
      allow read, write: if request.auth != null; // Simplified for MVP
    }

    match /notifications/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }
    
    match /app_status/{statusId} {
        allow read: if true;
        allow write: if isFounder();
    }
    
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.hasAny(['founder', 'developer']);
    }

    match /collections/{collectionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }

    match /playlists/{playlistId} {
       allow read, write: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }

    match /songs/{songId} {
        allow read: if true;
        allow create: if request.auth != null;
    }
  }
}