
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user is an admin if their auth token has the 'admin' custom claim set to true.
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    // A one-time-use function to allow the project owner to grant themselves the first admin/founder role.
    // This should be considered temporary. Once the first user has the 'founder' role and custom claims
    // are fully set up, this can be removed for even tighter security.
    function isProjectOwner() {
      return request.auth.uid == "uQpi9hoaX9dQQ2YHOYv05orx1rQ2";
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;

      // Allow users to update their own profile.
      // Also, allow an admin (or the project owner for bootstrapping) to update ONLY the 'role' field of any user.
      allow update: if (request.auth.uid == userId) || 
                     ((isAdmin() || isProjectOwner()) && request.resource.data.keys().hasOnly(['role']));
                     
      allow delete: if request.auth.uid == userId;
    }

    // Rules for other collections (posts, chats, etc.) should go here.
    // Example for posts:
    match /posts/{postId} {
      allow read: if true;
      allow create, update, delete: if request.auth.uid == request.resource.data.userId;
    }
    
    // Default deny all other access
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
