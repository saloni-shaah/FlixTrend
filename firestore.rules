
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Function to get the roles of the currently authenticated user
    function getRequestingUserRoles() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Function to check if the user is an admin (founder, cto, or developer)
    function isAdmin() {
      if (!isSignedIn()) {
        return false;
      }
      let userRoles = getRequestingUserRoles();
      // Ensure userRoles is a list before checking for admin roles
      return userRoles is list && 
             (userRoles.hasAny(['founder', 'cto', 'developer']));
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read a user's profile
      allow read: if true;

      // Users can only create their own document
      allow create: if isOwner(userId);

      // Users can update their own document.
      // Admins can update any user's document, but ONLY the 'role' field.
      allow update: if isOwner(userId) || 
                     (isAdmin() && request.resource.data.keys().hasOnly(['role']));

      // Only the user themselves or an admin can delete a user document
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Fallback rule: deny all other writes to all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
