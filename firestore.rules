rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Check if the user making the request has a 'founder' role in their own profile document.
    function isFounder() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.hasAny(['founder']);
    }
    
    // Check if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      // Allow public read of user profiles.
      allow read: if true;
      
      // Allow users to create their own profile and update their own non-role data.
      // The `isOwner` check is crucial here.
      allow create, update: if isOwner(userId) && !('role' in request.resource.data);

      // --- THE DEFINITIVE FIX ---
      // 1. Allow a founder to update ONLY the 'role' field of any user.
      // 2. Contains a one-time bootstrap rule to allow the first user (you) to become a founder.
      allow update: if request.resource.data.keys().hasOnly(['role']) && 
                      (isFounder() || request.auth.uid == 'uQpi9hoaX9dQQ2YHOYv05orx1rQ2');
    }

    // Default deny for all other collections.
    // This is a security best practice.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
