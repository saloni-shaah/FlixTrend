
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has an admin-level role.
    function is_admin(userId) {
      let userRole = get(/databases/$(database)/documents/users/$(userId)).data.role;
      // The role can be a string or an array of strings.
      if (userRole is string) {
        return userRole in ['developer', 'founder', 'cto'];
      } else if (userRole is list) {
        return 'developer' in userRole || 'founder' in userRole || 'cto' in userRole;
      }
      return false;
    }
    
    // Helper function to check if a user is the owner of a document.
    function is_owner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow anyone to read user profiles.
      allow read: if true;
      // Allow a user to create their own profile and update it.
      // Allow an admin to update any user's profile (e.g., to assign a role).
      allow write: if is_owner(userId) || is_admin(request.auth.uid);

      // Subcollections for user-specific data
      match /following/{followedId} {
        allow read: if true;
        allow write: if is_owner(userId);
      }
      match /followers/{followerId} {
        allow read: if true;
        allow write: if request.auth.uid == followerId;
      }
      match /starredPosts/{postId} {
        allow read, write: if is_owner(userId);
      }
    }

    // Rules for the 'posts' collection
    match /posts/{postId} {
      // Anyone can read posts.
      allow read: if true;
      // Only authenticated users can create posts.
      allow create: if request.auth != null;
      // Only the post owner can update or delete their post.
      allow update, delete: if is_owner(resource.data.userId);

      // Subcollections for post interactions
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if is_owner(resource.data.userId) || is_owner(get(/databases/$(database)/documents/posts/$(postId)).data.userId);
      }
      match /stars/{starId} {
        allow read: if true;
        allow write: if request.auth.uid == starId;
      }
       match /relays/{relayId} {
        allow read: if true;
        allow write: if request.auth.uid == relayId;
      }
       match /pollVotes/{voteId} {
        allow read: if true;
        allow create: if request.auth.uid == voteId;
      }
    }
    
    // Rules for flashes (ephemeral stories)
    match /flashes/{flashId} {
      // Only authenticated users can see flashes that haven't expired.
      allow read: if request.auth != null && resource.data.expiresAt > request.time;
      // Only authenticated users can create flashes.
      allow create: if request.auth != null;
      // Only the flash owner can delete it.
      allow delete: if is_owner(resource.data.userId);
    }
    
     // Rules for calls
    match /calls/{callId} {
        allow read, write, delete: if request.auth != null;
    }

    // Rules for chats
    match /chats/{chatId}/{message=**} {
      allow read, write: if request.auth != null && (chatId.split('_').hasAny([request.auth.uid]) || get(/databases/$(database)/documents/groups/$(chatId)).data.members.hasAny([request.auth.uid]));
    }
    
    // Rules for groups
    match /groups/{groupId} {
        allow read, create: if request.auth != null;
        allow update: if request.auth != null && request.auth.uid in resource.data.admins;
        allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }
    
    // Notifications can only be read and written to by the owner.
    match /notifications/{userId}/{notification=**} {
        allow read, write, delete: if is_owner(userId);
    }
    
    // Rules for app status (e.g., maintenance mode)
    match /app_status/maintenance {
        allow read: if true;
        // Only admins can change the maintenance mode status.
        allow write: if is_admin(request.auth.uid);
    }
    
    // Rules for music and playlists
    match /songs/{songId} {
      allow read: if true;
      allow create: if request.auth != null;
    }
    match /playlists/{playlistId} {
      allow read: if true;
      allow write: if is_owner(resource.data.ownerId);
    }
    match /collections/{collectionId} {
        allow read, write: if is_owner(resource.data.ownerId);
    }
  }
}
