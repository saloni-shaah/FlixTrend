rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isFounder() {
      // Allow the specific founder UID to have special permissions.
      // This is a secure way to bootstrap the first admin.
      return request.auth.uid == 'uQpi9hoaX9dQQ2YHOYv05orx1rQ2';
    }

    function isExistingAdmin() {
      // Allow users who already have an admin-level role to manage other users.
      // This requires reading the user's own profile document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.hasAny(['founder', 'cto', 'developer']);
    }

    // USER PROFILES
    match /users/{userId} {
      // Anyone can read public profile info
      allow read;

      // A user can update their own profile, BUT cannot change their role.
      // An admin (founder/cto/dev) CAN change another user's role or premium status.
      allow update: if (isOwner(userId) && !('role' in request.resource.data)) ||
                       (isFounder() && request.resource.data.keys().hasOnly(['role', 'isPremium'])) ||
                       (isExistingAdmin() && request.resource.data.keys().hasOnly(['role', 'isPremium']));

      // Only the user themselves or an admin can create their own document (signup).
      allow create: if isOwner(userId);
      
      // Nobody can delete user documents directly for safety. This is handled by a Cloud Function.
      allow delete: if false;

      // Subcollections
      match /{allPaths=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // POSTS, FLASHES, and other public content
    match /{document=**} {
        // Default allow read for all public content
        allow read;
        
        // Allow create/update/delete if user is authenticated
        allow write: if request.auth != null;
    }

    // APP STATUS (for Maintenance Mode)
    match /app_status/{statusId} {
        // Anyone can read the app status (to see if it's in maintenance)
        allow read;
        // Only a founder or existing admin can change the app status
        allow write: if isFounder() || isExistingAdmin();
    }
  }
}
